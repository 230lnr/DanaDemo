package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class MITI {

	//Left Trim
public static String ltrim(String s){
	for(int i=0;i<s.length();i++){
		if(s.substring(0,1).equals(" ")){
			s=s.substring(1);
		}
		else{
			break;
		}
	}
	return s;
}


//Right Trim
public static String rtrim(String s){
	for(int i=s.length();i>=0;i--){
		if(s.substring(i-1).equals(" ")){
			s=s.substring(0,i-1);
		}
		else{
			break;
		}
	}
	return s;
}



	
	//Left Trim
public static String LTRIM(String s){
	for(int i=0;i<s.length();i++){
		if(s.substring(0,1).equals(" ")){
			s=s.substring(1);
		}
		else{
			break;
		}
	}
	return s;
}


//Right Trim
public static String RTRIM(String s){
	for(int i=s.length();i>=0;i--){
		if(s.substring(i-1).equals(" ")){
			s=s.substring(0,i-1);
		}
		else{
			break;
		}
	}
	return s;
}

// IIF String
public static String IIF(boolean condition, String pass,String fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//iif String
public static String iif(boolean condition, String pass,String fail){
	if(condition)
		return pass;
	else
		return fail;
	
}


//IIF int
public static int IIF(boolean condition, int pass,int fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//iif int
public static int iif(boolean condition, int pass,int fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//IIF boolean
public static boolean IIF(boolean condition, boolean pass,boolean fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//iif boolean
public static boolean iif(boolean condition, boolean pass,boolean fail){
	if(condition)
		return pass;
	else
		return fail;
	
}


//IIF double
public static double IIF(boolean condition, double pass,double fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//iif double
public static double iif(boolean condition, double pass,double fail){
	if(condition)
		return pass;
	else
		return fail;
	
}


//IIF float
public static float IIF(boolean condition, float pass,float fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//iif float
public static float iif(boolean condition, float pass,float fail){
	if(condition)
		return pass;
	else
		return fail;
	
}


//IIF char
public static char IIF(boolean condition, char pass,char fail){
	if(condition)
		return pass;
	else
		return fail;
	
}

//iif char
public static char iif(boolean condition, char pass,char fail){
	if(condition)
		return pass;
	else
		return fail;
	
}


//int to string
public static String TO_CHAR(int s){
	return (s+"");
}

//int to string
public static String to_char(int s){
	return (s+"");
}

//float to string
public static String TO_CHAR(float s){
	return (s+"");
}

//float to string
public static String to_char(float s){
	return (s+"");
}

//double to string
public static String TO_CHAR(double s){
	return (s+"");
}

//double to string
public static String to_char(double s){
	return (s+"");
}

//char to string
public static String TO_CHAR(char s){
	return (s+"");
}

//char to string
public static String to_char(char s){
	return (s+"");
}

//boolean to string
public static String TO_CHAR(boolean s){
	return (s+"");
}

//boolean to string
public static String to_char(boolean s){
	return (s+"");
}

//String to int
public static int TO_INTEGER(String s){
	return Integer.parseInt(s);
}

//String to int
public static int to_integer(String s){
	return Integer.parseInt(s);
}


//String to double
public static double TO_DECIMAL(String s){
	return Double.parseDouble(s);
}

//String to double
public static double to_decimal(String s){
	return Double.parseDouble(s);
}

//Left padding
public static String LPAD(String s,int k,String p){
	
	for(int i=0;i<k;i++){
		s=p+s;
	}
	return s;
}

//Left padding
public static String lpad(String s,int k,String p){
	
	for(int i=0;i<k;i++){
		s=p+s;
	}
	return s;
}

//Right padding
public static String RPAD(String s,int k,String p){
	
	for(int i=0;i<k;i++){
		s=s+p;
	}
	return s;
}

//Right padding
public static String rpad(String s,int k,String p){
	
	for(int i=0;i<k;i++){
		s=s+p;
	}
	return s;
}


//Absolute double
public static double ABS(double a){
	return Math.abs(a);
}

//Absolute double
public static double abs(double a){
	return Math.abs(a);
}

//Absolute float
public static float ABS(float a){
	return Math.abs(a);
}

//Absolute float
public static float abs(float a){
	return Math.abs(a);
}

//Absolute int
public static int ABS(int a){
	return Math.abs(a);
}

//Absolute int
public static int abs(int a){
	return Math.abs(a);
}

//Round double
public static int ROUND(double a){
	return (int)a;
}

////Round double
public static int round(double a){
	return (int)a;
}

//Round float
public static int ROUND(float a){
	return Math.round(a);
}

////Round double
public static int round(float a){
	return Math.round(a);
}



}